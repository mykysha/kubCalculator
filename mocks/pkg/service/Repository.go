// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/mykysha/kubCalculator/api/v1alpha1"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DefineSecret provides a mock function with given fields: ctx, name, namespace, result
func (_m *Repository) DefineSecret(ctx context.Context, name string, namespace string, result int) (*v1.Secret, error) {
	ret := _m.Called(ctx, name, namespace, result)

	var r0 *v1.Secret
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *v1.Secret); ok {
		r0 = rf(ctx, name, namespace, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, name, namespace, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessCalculator provides a mock function with given fields: ctx, calc
func (_m *Repository) ProcessCalculator(ctx context.Context, calc *v1alpha1.Calculator) error {
	ret := _m.Called(ctx, calc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Calculator) error); ok {
		r0 = rf(ctx, calc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
